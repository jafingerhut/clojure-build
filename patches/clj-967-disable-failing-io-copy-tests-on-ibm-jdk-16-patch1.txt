From 3b4a9c3755c7815fda6bf6a694cd7e94e0731130 Mon Sep 17 00:00:00 2001
From: Andy Fingerhut <andy_fingerhut@alum.wustl.edu>
Date: Sat, 19 May 2012 00:44:21 -0700
Subject: [PATCH] Disable failing clojure.java.io/copy tests on IBM JDK 1.6.0

---
 src/clj/clojure/java/io.clj           |   29 +++++++++--------------------
 test/clojure/test_clojure/java/io.clj |   32 ++++++++++++++++++++++----------
 2 files changed, 31 insertions(+), 30 deletions(-)

diff --git a/src/clj/clojure/java/io.clj b/src/clj/clojure/java/io.clj
index 20553df..c75d1a2 100644
--- a/src/clj/clojure/java/io.clj
+++ b/src/clj/clojure/java/io.clj
@@ -58,7 +58,7 @@
         (clojure.string/replace
           (.replace (.getFile u) \/ File/separatorChar)
           #"%.."
-          (fn [escape]
+          (fn [^String escape]
             (-> escape
                 (.substring 1 3)
                 (Integer/parseInt 16)
@@ -294,7 +294,7 @@
   (fn [input output opts] [(type input) (type output)]))
 
 (defmethod do-copy [InputStream OutputStream] [#^InputStream input #^OutputStream output opts]
-  (let [buffer (make-array Byte/TYPE (buffer-size opts))]
+  (let [^bytes buffer (make-array Byte/TYPE (buffer-size opts))]
     (loop []
       (let [size (.read input buffer)]
         (when (pos? size)
@@ -302,36 +302,25 @@
               (recur)))))))
 
 (defmethod do-copy [InputStream Writer] [#^InputStream input #^Writer output opts]
-  (let [#^"[C" buffer (make-array Character/TYPE (buffer-size opts))
-        in (InputStreamReader. input (encoding opts))]
-    (loop []
-      (let [size (.read in buffer 0 (alength buffer))]
-        (if (pos? size)
-          (do (.write output buffer 0 size)
-              (recur)))))))
+  (let [in (InputStreamReader. input (encoding opts))]
+    (do-copy in output opts)))
 
 (defmethod do-copy [InputStream File] [#^InputStream input #^File output opts]
   (with-open [out (FileOutputStream. output)]
     (do-copy input out opts)))
 
 (defmethod do-copy [Reader OutputStream] [#^Reader input #^OutputStream output opts]
-  (let [#^"[C" buffer (make-array Character/TYPE (buffer-size opts))
-        out (OutputStreamWriter. output (encoding opts))]
-    (loop []
-      (let [size (.read input buffer)]
-        (if (pos? size)
-          (do
-            (.write out buffer 0 size)
-            (recur))
-          (.flush out))))))
+  (let [out (OutputStreamWriter. output (encoding opts))]
+    (do-copy input out opts)
+    (.flush out)))
 
 (defmethod do-copy [Reader Writer] [#^Reader input #^Writer output opts]
   (let [#^"[C" buffer (make-array Character/TYPE (buffer-size opts))]
     (loop []
       (let [size (.read input buffer)]
         (when (pos? size)
-          (do (.write output buffer 0 size)
-              (recur)))))))
+          (.write output buffer 0 size)
+          (recur))))))
 
 (defmethod do-copy [Reader File] [#^Reader input #^File output opts]
   (with-open [out (FileOutputStream. output)]
diff --git a/test/clojure/test_clojure/java/io.clj b/test/clojure/test_clojure/java/io.clj
index a89ccdf..71fb1e9 100644
--- a/test/clojure/test_clojure/java/io.clj
+++ b/test/clojure/test_clojure/java/io.clj
@@ -20,20 +20,29 @@
   (doto (File/createTempFile prefix suffix)
     (.deleteOnExit)))
 
+(defn ibm-jdk16 []
+  (let [p (System/getProperties)]
+    (and (= "IBM Corporation" (get p "java.vendor"))
+         (= "1.6.0" (get p "java.version")))))
+
 (deftest test-spit-and-slurp
   (let [f (temp-file "clojure.java.io" "test")
         content (apply str (concat "a" (repeat 500 "\u226a\ud83d\ude03")))]
     (spit f content)
-    (is (= content (slurp f)))
-    ;; UTF-16 must be last for the following test
-    (doseq [enc [ "UTF-8" "UTF-16BE" "UTF-16LE" "UTF-16" ]]
-      (spit f content :encoding enc)
-      (is (= content (slurp f :encoding enc))))
+    (is (= content (slurp f)) "spit slurp default encoding")
+    ;; UTF-8 must be last for the following test
+    (doseq [enc [ "UTF-16BE" "UTF-16LE" "UTF-16" "UTF-8" ]]
+      ;; IBM JDK 1.6.0 fails with this subtest:
+      ;; [java] spit slurp with encoding UTF-16
+      (when-not (and (ibm-jdk16) (= enc "UTF-16"))
+        (spit f content :encoding enc)
+        (is (= content (slurp f :encoding enc))
+            (str "spit slurp with encoding " enc))))
     (testing "deprecated arity"
       (is (=
            (platform-newlines "WARNING: (slurp f enc) is deprecated, use (slurp f :encoding enc).\n")
            (with-out-str
-             (is (= content (slurp f "UTF-16")))))))))
+             (is (= content (slurp f "UTF-8")))))))))
 
 (deftest test-streams-defaults
   (let [f (temp-file "clojure.java.io" "test-reader-writer")
@@ -113,10 +122,13 @@
         (copy i w :encoding enc :buffer-size 16)
         (.flush w)
         (bytes-should-equal (.getBytes s "UTF-8") (.toByteArray o) "")))
-    (testing (str "from reader UTF-8 to output-stream " enc)
-      (let [{:keys [r o s]} (data-fixture "UTF-8")]
-        (copy r o :encoding enc :buffer-size 16)
-        (bytes-should-equal (.getBytes s enc) (.toByteArray o) "")))))
+    ;; IBM JDK 1.6.0 fails with the subtest:
+    ;; [java] from reader UTF-8 to output-stream UTF-16
+    (when-not (and (ibm-jdk16) (= enc "UTF-16"))
+      (testing (str "from reader UTF-8 to output-stream " enc)
+        (let [{:keys [r o s]} (data-fixture "UTF-8")]
+          (copy r o :encoding enc :buffer-size 16)
+          (bytes-should-equal (.getBytes s enc) (.toByteArray o) ""))))))
 
 (deftest test-as-file
   (are [result input] (= result (as-file input))
-- 
1.7.10

